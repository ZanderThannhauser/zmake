
%skip: [' ', '\t']+;

`string`: '\"' [!'\"']* '\"' | '\'' [!'\'']* '\'';

`identifier`: ['_', 'a'-'z'] ['a'-'z', '0'-'9']*;

`text`: ['a'-'z', 'A'-'Z', '0'-'9', '/', '.', '_', '-']+;

`integer`: ['0'-'9']+;

argument
	: '(' expression #expression ')'
	| `string` #string
	| `text` #text
	;

simple_command: (argument #args[])+;

command
	:'$' simple_command #simples[]
	('<' argument #redirect_in)?
	('|' simple_command #simples[])*
	('>' argument #redirect_out)? '\n';

commands: (command #commands[])+;

primary_expression
	: '(' expression #inner ')'
	| '[' #list (expression #elements[] (',' expression #elements[])*)? ']'
	| `identifier` #variable
	| `integer` #integer
	| `string` #string
	| "dir" "(" expression #path ")"
	| "basename" "(" expression #path ")"
	;

postfix_expression: primary_expression #inner;

prefix_expression
	: postfix_expression #inner
	| '+' #pos prefix_expression #sub
	| '-' #neg prefix_expression #sub
	| '~' #neg prefix_expression #sub
	| '!' #neg prefix_expression #sub
	;

multiplicative_expression
	: prefix_expression #inner
	| multiplicative_expression #left '*' #mul prefix_expression #right
	| multiplicative_expression #left '/' #div prefix_expression #right
	;

additive_expression
	: multiplicative_expression #inner
	| additive_expression #left '+' #add multiplicative_expression #right
	| additive_expression #left '-' #sub multiplicative_expression #right
	;

shift_expression
	: additive_expression #inner
	| shift_expression #left "<<" #leftshift  additive_expression #right
	| shift_expression #left ">>" #rightshift additive_expression #right
	;

relational_expression
	: shift_expression #inner
	| relational_expression #left ">"  #gt  shift_expression #right
	| relational_expression #left ">=" #gte shift_expression #right
	| relational_expression #left "<"  #lt  shift_expression #right
	| relational_expression #left "<=" #lte shift_expression #right
	;

equality_expression
	: relational_expression #inner
	| equality_expression #left "==" #eq relational_expression #right
	| equality_expression #left "!=" #nq relational_expression #right
	;

and_expression
	: equality_expression #inner
	| and_expression #left '&' equality_expression #right
	;

exclusive_or_expression
	: and_expression #inner
	| exclusive_or_expression #left '^' and_expression #right
	;

inclusive_or_expression
	: exclusive_or_expression #inner
	| inclusive_or_expression #left '|' exclusive_or_expression #right
	;

logical_and_expression
	: inclusive_or_expression #inner
	| logical_and_expression #left "&&" inclusive_or_expression #right
	;

logical_or_expression
	: logical_and_expression #inner
	| logical_or_expression #left "||" logical_and_expression #right
	;

conditional_expression
	: logical_or_expression #inner
	| logical_or_expression '?' expression #truecase ':' conditional_expression #falsecase
	;

expression: conditional_expression #inner;

recipe: (argument #targets[])+
	':' (argument #dependencies[])*
	('|' (argument #ordered[])*)? '\n'?
	(commands #commands | '\n') '\n'*;

assignment_operator
	:   "="    #eq
	|  "*=" #muleq
	|  "/=" #diveq
	|  "%=" #modeq
	|  "+=" #addeq
	|  "-=" #subeq
	|  "&=" #andeq
	|  "^=" #xoreq
	|  "|=" #ioreq
	| "<<=" #lsheq
	| ">>=" #rsheq
	;

assignment: `identifier` #variable assignment_operator #op expression #expression;

assignments: assignment (';' assignment)* ';'? '\n'+;

conditional:
	"if" expression #conditional ':' '\n'+
		(statement #truecase[])+
	("else" '\n'?
		(statement #falsecase[])+)?
	"endif" '\n'+;

iterative:
	"for" `identifier` #variable "in" expression #list ':' '\n'
		(statement #body[])+
	"endfor" '\n'+;

include: "include" argument #argument '\n'+;

print: "print" expression #expression '\n'+;

statement
	: recipe #recipe
	| assignments #assignments
	| conditional #conditional
	| iterative #iterative
	| include #include
	| print #print
	;

root: '\n'* (statement #statements[])+;

%start: root #root;












